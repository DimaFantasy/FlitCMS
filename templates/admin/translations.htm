{{php if ( !$user->isCurrentRole('Admin'))die('Access Denied'); }}
{{template header.htm}}

<div class="container-fluid  p-4">
    <div class="row">
        <div class="col-md-12">
            <h2 class="mb-4">{{t('Missing Translations')}}</h2>
            
            <div class="card border mb-4">
                <div class="card-body p-0">
                    <table class="table table-hover mb-0" id="missingTranslationsTable">
                        <thead>
                            <tr>
                                <th>{{t('Missing Translation')}}</th>
                                <th class="text-end">{{t('Actions')}}</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Строки будут добавлены через JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="card shadow-sm border mb-4">
                <div class="card-body">
                    <label for="selectedTranslation" class="form-label">{{t('Selected Translation')}}</label>
                    <div class="d-flex flex-column gap-2">
                        <div class="input-group">
                            <input type="text" class="form-control" id="selectedTranslation">
                        </div>
                        <div class="input-group" id="originalKeyGroup" style="display: none;">
                            <span class="input-group-text">{{t('Has translation, original key:')}}</span>
                            <input type="text" class="form-control" id="originalKey" readonly>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Шаблон строки таблицы -->
<template id="missing-translation-row-template">
    <tr>
        <td></td>
        <td class="text-end">
            <button type="button" class="btn btn-sm btn-outline-danger delete-missing">
                {{t('Delete')}}
            </button>
        </td>
    </tr>
</template>

<!-- Обновляем шаблон перевода -->
<template id="translation-template">
    <div class="card shadow-sm border mb-3">
        <div class="card-body">
            <div class="d-flex align-items-center mb-2">
                <span class="badge bg-primary me-2 text-uppercase"></span>
                <label class="form-label mb-0" for="translation_input">{{t('Translation')}}</label>
            </div>
            <div class="input-group">
                <input type="text" 
                       class="form-control translation-input" 
                       id="translation_input"
                       name="translation_input" 
                       autocomplete="off">
                <button class="btn btn-outline-success translate-btn" type="button">{{t('Translate')}}</button>   
                <button class="btn btn-outline-success save-translation" type="button">{{t('Save')}}</button>
                <!-- Заменяем пользовательский стиль на классы Bootstrap -->
                <span class="input-group-text d-none text-success" role="status">
                    <!-- Используем символ галочки из Bootstrap -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-lg" viewBox="0 0 16 16">
                        <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
                    </svg>
                </span>
            </div>
        </div>
    </div>
</template>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Основные переменные
    var selectedTranslationInput = document.getElementById('selectedTranslation');
    var translationTemplate = document.getElementById('translation-template');
    var validLanguages = [];
    var debounceTimer;
    var checkOriginalKeyTimeout;

    /**
     * Загружает список доступных языков с сервера
     * После успешной загрузки вызывает loadMissingTranslations()
     * @returns {void}
     */
    function loadValidLanguages() {
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'ajax.php', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.setRequestHeader('X-CSRF-TOKEN', window.csrfToken);
        
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var data = JSON.parse(xhr.responseText);
                if (data.success) {
                    validLanguages = data.languages;
                    loadMissingTranslations();
                }
            }
        };

        xhr.send('action=get_valid_languages');
    }

    /**
     * Загружает существующие переводы для указанного текста
     * @param {string} sourceText - Исходный текст для поиска переводов
     * @returns {void}
     */
    function loadTranslationsForKey(sourceText) {
        for (var i = 0; i < validLanguages.length; i++) {
            var lang = validLanguages[i];
            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'ajax.php', true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.setRequestHeader('X-CSRF-TOKEN', window.csrfToken);
            
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var data = JSON.parse(xhr.responseText);
                    if (data.success) {
                        var input = document.querySelector('input[data-lang="' + lang + '"]');
                        if (input) {
                            input.value = data.translation;
                        }
                    }
                }
            };

            xhr.send('action=get_translation&key=' + encodeURIComponent(sourceText) + '&lang=' + encodeURIComponent(lang));
        }
    }

    /**
     * Загружает список отсутствующих переводов и обновляет таблицу
     * @returns {void}
     */
    function loadMissingTranslations() {
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'ajax.php', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.setRequestHeader('X-CSRF-Token', window.csrfToken);
        
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var data = JSON.parse(xhr.responseText);
                if (data.success) {
                    var tbody = document.querySelector('#missingTranslationsTable tbody');
                    var template = document.getElementById('missing-translation-row-template');
                    tbody.innerHTML = '';
                    
                    if (Array.isArray(data.translations)) {
                        for (var i = 0; i < data.translations.length; i++) {
                            var translation = data.translations[i];
                            var row = template.content.cloneNode(true);
                            row.querySelector('td').textContent = translation;
                            
                            var deleteBtn = row.querySelector('.delete-missing');
                            if (deleteBtn) {
                                deleteBtn.addEventListener('click', (function(translation) {
                                    return function() {
                                        deleteMissingTranslation(translation);
                                    };
                                })(translation));
                            }
                            
                            tbody.appendChild(row);
                        }
                    }
                }
            }
        };

        xhr.send('action=get_missing_translations');
    }

    /**
     * Проверяет наличие оригинального ключа для перевода
     * @param {string} text - Текст для поиска оригинального ключа
     * @returns {void}
     */
    function checkOriginalKey(text) {
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'ajax.php', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.setRequestHeader('X-CSRF-Token', window.csrfToken);
        
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var data = JSON.parse(xhr.responseText);
                var originalKeyGroup = document.getElementById('originalKeyGroup');
                var originalKeyInput = document.getElementById('originalKey');
                
                // Отображение оригинального ключа если найден
                if (data.success) {
                    originalKeyGroup.style.display = 'flex';
                    originalKeyInput.value = data.key;
                    generateTranslationForms(data.key);
                } else {
                    originalKeyGroup.style.display = 'none';
                    originalKeyInput.value = '';
                    generateTranslationForms(text);
                }
            }
        };

        xhr.send('action=find_original_key&translation=' + encodeURIComponent(text));
    }

    /**
     * Выполняет перевод текста через Google Translate API
     * @param {string} text - Текст для перевода
     * @param {string} targetLang - Целевой язык перевода
     * @returns {Promise<string>} Переведенный текст
     */
    function translateText(text, targetLang) {
        var sourceLang = 'auto';
        var url = 'https://translate.googleapis.com/translate_a/single?client=gtx&sl=' + sourceLang + '&tl=' + targetLang + '&dt=t&q=' + encodeURIComponent(text);
        
        return fetch(url)
            .then(function(response) {
                return response.json();
            })
            .then(function(data) {
                if (data && data[0] && data[0][0] && data[0][0][0]) {
                    return data[0][0][0];
                }
                throw new Error('Invalid translation response');
            });
    }

    /**
     * Сохраняет перевод на сервере
     * @param {string} lang - Код языка
     * @param {string} translation - Текст перевода
     * @param {string} originalText - Оригинальный текст
     * @returns {void}
     */
    function saveTranslation(lang, translation, originalText) {
        if (!translation) {
            alert('{{t("Please fill in all required fields")}}');
            return;
        }

        var originalKey = document.getElementById('originalKey').value;
        var textToSave = originalKey || originalText;

        var card = document.querySelector('input[data-lang="' + lang + '"]').closest('.card');
        var saveBtn = card.querySelector('.save-translation');
        var successIcon = card.querySelector('.input-group-text');
        
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';

        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'ajax.php', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.setRequestHeader('X-CSRF-Token', window.csrfToken);
        
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    var data = JSON.parse(xhr.responseText);
                    if (data.success) {
                        successIcon.classList.remove('d-none');
                        setTimeout(function() {
                            successIcon.classList.add('d-none');
                        }, 2000);
                    } else {
                        alert(data.message || '{{t("Failed to save translation")}}');
                    }
                } else {
                    console.error('Error saving translation:', xhr.statusText);
                    alert('{{t("Error saving translation")}}');
                }
                saveBtn.disabled = false;
                saveBtn.textContent = '{{t("Save")}}';
            }
        };

        xhr.send('action=save_translation&lang=' + encodeURIComponent(lang) + '&translation=' + encodeURIComponent(translation) + '&original=' + encodeURIComponent(textToSave));
    }

    /**
     * Удаляет отсутствующий перевод из системы
     * @param {string} key - Ключ перевода для удаления
     * @returns {void}
     */
    function deleteMissingTranslation(key) {
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'ajax.php', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.setRequestHeader('X-CSRF-Token', window.csrfToken);
        
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var data = JSON.parse(xhr.responseText);
                if (data.success) {
                    loadMissingTranslations();
                } else {
                    alert(data.message || t('Failed to delete translation'));
                }
            }
        };

        xhr.send('action=delete_missing_translation&key=' + encodeURIComponent(key));
    }

    /**
     * Генерирует формы для всех доступных языков перевода
     * @param {string} sourceText - Исходный текст для перевода
     * @returns {void}
     */
    function generateTranslationForms(sourceText) {
        // Если нет текста, не создаем формы
        if (!sourceText.trim()) {
            const existingContainer = document.getElementById('translations-container');
            if (existingContainer) existingContainer.remove();
            return;
        }

        const container = document.createElement('div');
        container.id = 'translations-container';
        
        // Получаем оригинальный ключ, если есть
        const originalKey = document.getElementById('originalKey').value;
        const textToUse = originalKey || sourceText;
        
        validLanguages.forEach(lang => {
            const translation = translationTemplate.content.cloneNode(true);
            const card = translation.querySelector('.card');
            
            // Настройка базовых элементов
            translation.querySelector('.badge').textContent = lang.toUpperCase();
            translation.querySelector('label').setAttribute('for', `translation_${lang}`);
            const input = translation.querySelector('.translation-input');
            input.setAttribute('data-lang', lang);
            input.setAttribute('id', `translation_${lang}`);
            input.placeholder = `${lang.toUpperCase()} translation`;

            // Кнопка перевода - исправленная версия
            const translateBtn = card.querySelector('.translate-btn');
            translateBtn.addEventListener('click', function() {
                // Получаем корректное поле ввода для текущей карточки
                const inputField = this.closest('.input-group').querySelector('.translation-input');
                
                translateBtn.disabled = true;
                translateBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';
                
                translateText(textToUse, lang.toLowerCase())
                    .then(result => {
                        inputField.value = result;
                        inputField.focus();
                    })
                    .catch(error => {
                        console.error('Translation error:', error);
                        alert('{{t("Translation failed")}}');
                    })
                    .finally(() => {
                        translateBtn.disabled = false;
                        translateBtn.textContent = '{{t("Translate")}}';
                    });
            });

            // Кнопка сохранения
            const saveBtn = translation.querySelector('.save-translation');
            const successIcon = translation.querySelector('.input-group-text');
            
            saveBtn.onclick = () => {
                if (!input.value.trim()) return;
                
                saveBtn.disabled = true;
                saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';
                
                saveTranslation(lang, input.value.trim(), textToUse)
                    .then(() => {
                        successIcon.classList.remove('d-none');
                        setTimeout(() => successIcon.classList.add('d-none'), 2000);
                    })
                    .catch(error => console.error('Save error:', error))
                    .finally(() => {
                        saveBtn.disabled = false;
                        saveBtn.textContent = '{{t("Save")}}';
                    });
            };

            // Загрузка существующего перевода
            fetch('ajax.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-CSRF-Token': window.csrfToken
                },
                body: `action=get_translation&key=${encodeURIComponent(textToUse)}&lang=${encodeURIComponent(lang)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.translation) {
                    input.value = data.translation;
                }
            })
            .catch(error => console.error('Load translation error:', error));

            container.appendChild(card);
        });

        // Обновляем или добавляем контейнер с формами
        const existingContainer = document.getElementById('translations-container');
        if (existingContainer) {
            existingContainer.replaceWith(container);
        } else {
            document.getElementById('selectedTranslation')
                .closest('.card')
                .after(container);
        }
    }

    /**
     * Подсвечивает строку в таблице, соответствующую введенному тексту
     * @param {string} inputText - Текст для поиска соответствия
     * @returns {void}
     */
    function highlightMatchingRow(inputText) {
        var rows = document.querySelectorAll('#missingTranslationsTable tbody tr');
        rows.forEach(row => row.classList.remove('table-primary'));

        if (!inputText.trim()) return;

        rows.forEach(row => {
            if (row.cells[0].textContent.trim() === inputText) {  // Changed from searchText to inputText
                row.classList.add('table-primary');
            }
        });
    }

    /**
     * Создает функцию с задержкой выполнения
     * @param {Function} func - Функция для выполнения
     * @param {number} wait - Время задержки в миллисекундах
     * @returns {Function} Функция с debounce эффектом
     */
    function debounce(func, wait) {
        return function() {
            var args = arguments;
            var context = this;
            var later = function() {
                clearTimeout(debounceTimer);
                func.apply(context, args);
            };
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(later, wait);
        };
    }

    /**
     * Обрабатывает изменение текста в поле selectedTranslation
     * @param {string} text - Новое значение текста
     */
    function handleTextChange(text) {
        const trimmedText = text.trim();
        
        // 1. Очищаем предыдущие состояния
        const originalKeyGroup = document.getElementById('originalKeyGroup');
        const originalKeyInput = document.getElementById('originalKey');
        const rows = document.querySelectorAll('#missingTranslationsTable tbody tr');
        rows.forEach(row => row.classList.remove('table-primary'));

        if (!trimmedText) {
            originalKeyGroup.style.display = 'none';
            originalKeyInput.value = '';
            const container = document.getElementById('translations-container');
            if (container) container.remove();
            return;
        }

        // 2. Подсвечиваем соответствующую строку в таблице
        rows.forEach(row => {
            if (row.cells[0].textContent.trim() === trimmedText) {
                row.classList.add('table-primary');
            }
        });

        // 3. Проверяем оригинальный ключ
        const xhr = new XMLHttpRequest();
        xhr.open('POST', 'ajax.php', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.setRequestHeader('X-CSRF-Token', window.csrfToken);
        
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                const data = JSON.parse(xhr.responseText);
                
                if (data.success) {
                    originalKeyGroup.style.display = 'flex';
                    originalKeyInput.value = data.key;
                    generateTranslationForms(data.key);
                } else {
                    originalKeyGroup.style.display = 'none';
                    originalKeyInput.value = '';
                    generateTranslationForms(trimmedText);
                }
            }
        };

        xhr.send('action=find_original_key&translation=' + encodeURIComponent(trimmedText));
    }

    // Обновляем обработчики событий
    selectedTranslationInput.addEventListener('input', debounce(function(e) {
        handleTextChange(e.target.value);
    }, 300)); // Задержка в 300 миллисекунд

    document.getElementById('missingTranslationsTable').addEventListener('click', function(e) {
        const targetRow = e.target.closest('tr');
        if (targetRow && !targetRow.closest('thead') && targetRow.cells) {
            const selectedText = targetRow.cells[0].textContent;
            selectedTranslationInput.value = selectedText;
            handleTextChange(selectedText);
        }
    });

    // 4. Инициализация
    loadValidLanguages();
});
</script>

{{template footer.htm}}