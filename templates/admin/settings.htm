{{php if ( !$user->isCurrentRole('Admin'))die('Access Denied'); }} 
{{template header.htm}}

<div class="container-fluid p-4">
    <h2>{{t('Settings')}}</h2>
<!-- Кнопка для очистки кэша и сообщение на одной горизонтали -->
<div class="card rounded shadow-none mb-3">
        <div class="d-flex align-items-center p-3">
            <button onclick="clearCache()" class="btn btn-danger me-3">{{t('Clear Cache')}}</button>
            <!-- Скрытый элемент для сообщений -->
            <div id="cache-message" class="alert mb-0 alert-success" role="alert" 
                    style="flex: 1 1 0%; height: 38px; display: none; align-items: center; justify-content: center;">
                    [Cache cleared successfully.]
            </div>
        </div>
</div>

    <div class="card rounded shadow-none mb-3">
        <form id="settingsForm" class="shadow p-3 rounded"> <!-- Добавлен класс shadow и padding -->

            <?php
            $config = require 'config/config.inc.php'; // Загружаем настройки из файла

            function generateSettingField($key, $value, $fullKey) {
                $html = '<div class="d-flex align-items-center mb-3">'; // Контейнер с flexbox
                $html .= '<div class="flex-grow-1">'; // Контейнер для поля ввода
                $html .= '<label for="' . htmlspecialchars($fullKey) . '" class="form-label"><strong>' . t($key) . '</strong></label>'; // Обернули в <strong>

                // Проверяем, есть ли у настройки ограниченный набор значений
                $allowedValues = getAllowedValues($key); // Функция, которая возвращает допустимые значения для настройки
                if ($allowedValues) {
                    // Если есть допустимые значения, создаем выпадающий список
                    $html .= '<select class="form-select" id="' . htmlspecialchars($fullKey) . '" name="' . htmlspecialchars($fullKey) . '">';
                    foreach ($allowedValues as $option) {
                        $selected = ($option === $value) ? 'selected' : '';
                        $html .= '<option value="' . htmlspecialchars($option) . '" ' . $selected . '>' . htmlspecialchars($option) . '</option>';
                    }
                    $html .= '</select>';
                } elseif (is_bool($value)) {
                    // Булево значение (переключатель)
                    $html .= '<div class="form-check form-switch">';
                    $html .= '<input class="form-check-input" type="checkbox" id="' . htmlspecialchars($fullKey) . '" name="' . htmlspecialchars($fullKey) . '" ' . ($value ? 'checked' : '') . '>';
                    $html .= '<label class="form-check-label" for="' . htmlspecialchars($fullKey) . '"><strong>' . ($value ? t('Enabled') : t('Disabled')) . '</strong></label>'; // Обернули в <strong>
                    $html .= '</div>';
                } elseif (is_numeric($value)) {
                    // Числовое значение
                    $html .= '<input type="number" class="form-control" id="' . htmlspecialchars($fullKey) . '" name="' . htmlspecialchars($fullKey) . '" value="' . htmlspecialchars($value) . '" step="any">';
                } else {
                    // Строковое значение
                    $html .= '<input type="text" class="form-control" id="' . htmlspecialchars($fullKey) . '" name="' . htmlspecialchars($fullKey) . '" value="' . htmlspecialchars($value) . '">';
                }
                $html .= '</div>'; // Закрываем контейнер для поля ввода

                // Контейнер для кнопок (расположены вертикально)
                $html .= '<div class="d-flex flex-column ms-3">'; // flex-column для вертикального расположения
                $html .= '<button type="button" class="btn btn-primary mb-2 save-btn d-none" data-key="' . htmlspecialchars($fullKey) . '">Сохранить</button>';
                $html .= '<button type="button" class="btn btn-secondary cancel-btn d-none" data-key="' . htmlspecialchars($fullKey) . '">Отменить</button>';
                $html .= '</div>'; // Закрываем контейнер для кнопок

                $html .= '</div>'; // Закрываем контейнер с flexbox

                return $html;
            }

            function getAllowedValues($key) {
                $allowedValues = [
                    'storage' => ['json', 'mysql'], // Пример для настройки storage
                    // Добавьте другие настройки с ограниченным набором значений
                    'defaultLanguage' => ['ru', 'en', 'de'],
                ];

                return $allowedValues[$key] ?? null;
            }

            function renderSettings($config, $parentKey = '') {
                foreach ($config as $key => $value) {
                    // Формируем полный ключ для текущей настройки
                    $fullKey = $parentKey ? $parentKey . '##' . $key : $key;

                    if (is_array($value)) {
                        // Если значение — массив, рекурсивно вызываем функцию для обработки вложенных настроек
                        echo '<div class="mb-3 p-3 border rounded shadow-sm">'; // Добавлен класс shadow-sm
                        echo '<h4>' . htmlspecialchars($key) . '</h4>';
                        renderSettings($value, $fullKey);
                        echo '</div>'; // Закрываем обертку
                    } else {
                        // Если значение — строка, число или булево значение, генерируем поле
                        echo '<div class="mb-3">';
                        echo generateSettingField($key, $value, $fullKey);
                        echo '</div>';
                    }
                }
            }

            // Рендерим настройки
            renderSettings($config);
            ?>
        </form>
    </div>

</div>


<script>

function clearCache() {
    fetch('ajax.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-CSRF-TOKEN': csrfToken
        },
        body: new URLSearchParams({
            action: 'clear_cache'
        }).toString()
    })
    .then(response => response.json())
    .then(data => {
        const messageElement = document.getElementById('cache-message');
        
        if (data.success) {
            messageElement.textContent = '{{t('Cache cleared successfully.')}}';
            messageElement.classList.remove('alert-danger', 'alert-primary');
            messageElement.classList.add('alert-success');
        } else {
            messageElement.textContent = '{{t('Error:')}} ' + data.message;
            messageElement.classList.remove('alert-success', 'alert-primary');
            messageElement.classList.add('alert-danger');
        }
        
        messageElement.style.display = 'flex';  // Показываем сообщение

        // Через 4 секунды скрываем сообщение
        setTimeout(() => {
            messageElement.style.display = 'none';
        }, 2000);
    })
    .catch(error => {
        const messageElement = document.getElementById('cache-message');
        messageElement.textContent = '{{t('Error:')}} ' + error.message;
        messageElement.classList.remove('alert-success', 'alert-primary');
        messageElement.classList.add('alert-danger');
        
        messageElement.style.display = 'flex';  // Показываем сообщение

        // Через 4 секунды скрываем сообщение
        setTimeout(() => {
            messageElement.style.display = 'none';
        }, 4000);
    });
}


document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('settingsForm');

    // Обработчик изменения значений в форме
    form.querySelectorAll('input, select').forEach(element => {
        let originalValue = element.value; // Сохраняем исходное значение

        element.addEventListener('input', function() {
            const saveBtn = form.querySelector(`.save-btn[data-key="${this.name}"]`);
            const cancelBtn = form.querySelector(`.cancel-btn[data-key="${this.name}"]`);
            if (saveBtn && cancelBtn) {
                saveBtn.classList.remove('d-none');
                cancelBtn.classList.remove('d-none');
            }
        });

        element.addEventListener('change', function() {
            const saveBtn = form.querySelector(`.save-btn[data-key="${this.name}"]`);
            const cancelBtn = form.querySelector(`.cancel-btn[data-key="${this.name}"]`);
            if (saveBtn && cancelBtn) {
                saveBtn.classList.remove('d-none');
                cancelBtn.classList.remove('d-none');
            }
        });
    });

    // Обработчик нажатия на кнопку "Сохранить"
    form.querySelectorAll('.save-btn').forEach(button => {
        button.addEventListener('click', function() {
            const dataKey = this.getAttribute('data-key'); // Получаем ключ с ##
            const element = form.querySelector(`[name="${dataKey}"]`); // Используем ключ с ##
            let value;

            // Определяем значение в зависимости от типа элемента
            if (element.type === 'checkbox') {
                value = element.checked;
            } else {
                value = element.value;
            }

            // Делаем кнопку неактивной
            this.disabled = true;

            // Отправка данных на сервер
            fetch('ajax.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-CSRF-TOKEN': csrfToken
                },
                body: new URLSearchParams({
                    action: 'update_settings',
                    key: dataKey, // Передаем ключ с ##
                    value: value
                }).toString()
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('{{t('Settings saved successfully.')}}');
                    // Перезагружаем страницу после успешного обновления
                    window.location.reload();
                } else {
                    alert('{{t('Error:')}}' + data.message);
                    // Включаем кнопку обратно в случае ошибки
                    this.disabled = false;
                }
            })
            .catch(error => {
                alert('{{t('Error:')}}' + error.message);
                // Включаем кнопку обратно в случае ошибки
                this.disabled = false;
            });
        });
    });

    // Обработчик нажатия на кнопку "Отменить"
    form.querySelectorAll('.cancel-btn').forEach(button => {
        button.addEventListener('click', function() {
            const dataKey = this.getAttribute('data-key'); // Получаем ключ с ##
            const element = form.querySelector(`[name="${dataKey}"]`); // Используем ключ с ##

            // Восстанавливаем исходное значение
            if (element.type === 'checkbox') {
                element.checked = element.dataset.originalChecked === 'true';
            } else {
                element.value = element.dataset.originalValue;
            }

            // Скрываем кнопки
            this.classList.add('d-none');
            const saveBtn = form.querySelector(`.save-btn[data-key="${dataKey}"]`);
            if (saveBtn) {
                saveBtn.classList.add('d-none');
            }
        });
    });

    // Сохраняем исходные значения при загрузке страницы
    form.querySelectorAll('input, select').forEach(element => {
        if (element.type === 'checkbox') {
            element.dataset.originalChecked = element.checked;
        } else {
            element.dataset.originalValue = element.value;
        }
    });
});
</script>

{{template footer.htm}}