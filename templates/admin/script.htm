{{php if ( !$user->isCurrentRole('Admin'))die('Access Denied'); }} 

<template id="language-selector">
    <div class="dropdown">
      <button class="btn btn-light dropdown-toggle" type="button" id="langDropdown" data-bs-toggle="dropdown" aria-expanded="false">
        <span id="currentLang">{{t('Select language')}}</span>
      </button>
      <ul class="dropdown-menu" aria-labelledby="langDropdown">
        {{php
          // Получаем список языков из конфигурации
          $languages = array_map('trim', explode(',', $cmsConfig['validLanguages']));
          // Формируем элементы списка для каждого языка
          foreach($languages as $lang) {
            $langName = ucfirst($lang); // Переводим первую букву в верхний регистр
            echo "<li><a class='dropdown-item' href='#' onclick='setLanguage(\"$lang\")'>$langName</a></li>";
          }
        }}
      </ul>
    </div>
</template>

<script>

function setLanguage(lang) {
    if (typeof langCookieName !== 'undefined' && lang) {
        document.cookie = langCookieName + '=' + lang + ';path=/';
        window.location.reload();
    }
}   

document.addEventListener("DOMContentLoaded", function () {
    // Инициализация селектора языка
    const template = document.getElementById("language-selector");
    const container = document.getElementById("language-selector-container");
    if (template && container) {
        const clone = template.content.cloneNode(true);
        container.appendChild(clone);
    }

    // Инициализация переключателя темы    
    // Проверяем, существует ли переключатель темы
    const themeSwitch = document.getElementById("themeSwitch");
    if (themeSwitch) {
        const themeLabel = document.getElementById("themeLabel");
        const navbar = document.getElementById("navbar");
        const footer = document.getElementById("footer");
        const langButton = document.getElementById("langDropdown"); // Кнопка переключателя языка
        const sidebar = document.getElementById("sidebar"); // Боковая панель

        function applyTheme(theme) {
            // Применяем тему ко всему документу
            document.documentElement.setAttribute('data-bs-theme', theme);

            // Обновляем боковую панель
            if (sidebar) {
                if (theme === 'dark') {
                    sidebar.classList.remove('bg-light', 'text-dark');
                    sidebar.classList.add('bg-dark', 'text-white');
                } else {
                    sidebar.classList.remove('bg-dark', 'text-white');
                    sidebar.classList.add('bg-light', 'text-dark');
                }
            }

            // Обновляем навбар
            if (navbar) {
                if (theme === 'dark') {
                    navbar.classList.remove('navbar-light', 'bg-light');
                    navbar.classList.add('navbar-dark', 'bg-dark', 'shadow');
                } else {
                    navbar.classList.remove('navbar-dark', 'bg-dark');
                    navbar.classList.add('navbar-light', 'bg-light', 'shadow');
                }
            }

            // Обновляем футер
            if (footer) {
                if (theme === 'dark') {
                    footer.classList.remove('bg-light', 'text-dark');
                    footer.classList.add('bg-dark', 'text-white', 'shadow');
                } else {
                    footer.classList.remove('bg-dark', 'text-white');
                    footer.classList.add('bg-light', 'text-dark', 'shadow');
                }
            }

            // Обновляем кнопку переключателя языка
            if (langButton) {
                if (theme === 'dark') {
                    langButton.classList.remove('btn-light');
                    langButton.classList.add('btn-dark');
                } else {
                    langButton.classList.remove('btn-dark');
                    langButton.classList.add('btn-light');
                }
            }


            // Обновляем текст переключателя темы
            if (themeLabel) {
                themeLabel.textContent = theme === 'dark' ? '{{t('Dark theme')}}' : '{{t('Light theme')}}';
            }
        }

        // Загружаем сохраненную тему из localStorage
        const savedTheme = localStorage.getItem('theme') || 'light';
        applyTheme(savedTheme);
        themeSwitch.checked = savedTheme === 'dark';

        // Обработчик изменения темы
        themeSwitch.addEventListener('change', function () {
            const theme = this.checked ? 'dark' : 'light';
            applyTheme(theme);
            localStorage.setItem('theme', theme);
        });
    }
});
</script>